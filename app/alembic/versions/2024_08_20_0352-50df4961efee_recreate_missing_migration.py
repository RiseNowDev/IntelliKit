"""Recreate missing migration

Revision ID: 50df4961efee
Revises: 
Create Date: 2024-08-20 03:52:09.994335

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '50df4961efee'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('groups',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('permissions',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('roles',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user_group',
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('group_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('user_role',
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('role_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.drop_table('validation_rules')
    op.drop_table('validation_results')
    op.drop_table('imported_data')
    op.add_column('users', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.drop_index('ix_users_id', table_name='users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'created_at')
    op.create_table('imported_data',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('file_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('data_content', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='imported_data_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('validation_results',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('imported_data_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('field_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('validation_status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['imported_data_id'], ['imported_data.id'], name='validation_results_imported_data_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='validation_results_pkey')
    )
    op.create_table('validation_rules',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('field_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('rule_type', postgresql.ENUM('REGEX', 'MIN_LENGTH', 'MAX_LENGTH', 'REQUIRED', 'EMAIL', 'TAX_ID', 'VAT', 'COUNTRY_CODE', name='ruletype'), autoincrement=False, nullable=False),
    sa.Column('rule_value', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='validation_rules_pkey')
    )
    op.drop_table('user_role')
    op.drop_table('user_group')
    op.drop_table('roles')
    op.drop_table('permissions')
    op.drop_table('groups')
    # ### end Alembic commands ###